<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts | Academic</title>
    <link>http://localhost:1313/post/</link>
      <atom:link href="http://localhost:1313/post/index.xml" rel="self" type="application/rss+xml" />
    <description>Posts</description>
    <generator>Hugo Blox Builder (https://hugoblox.com)</generator><language>en-us</language><lastBuildDate>Fri, 15 Mar 2024 00:00:00 +0000</lastBuildDate>
    <image>
      <url>http://localhost:1313/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url>
      <title>Posts</title>
      <link>http://localhost:1313/post/</link>
    </image>
    
    <item>
      <title>Git</title>
      <link>http://localhost:1313/post/git_post/</link>
      <pubDate>Fri, 15 Mar 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/git_post/</guid>
      <description>&lt;h2 id=&#34;git--это-система-коммитов&#34;&gt;Git — это система коммитов&lt;/h2&gt;
&lt;p&gt;Представьте ситуацию: геймер доходит до финала, проигрывает и возвращается к началу уровня — попадает в ближайшую контрольную точку игры, где разработчики разрешили сохраниться. Если мы уберём контрольные точки, после каждого проигрыша придётся начинать игру заново.&lt;/p&gt;
&lt;p&gt;В программировании за сохранение кода в контрольных точках отвечает система контроля версий — специальная технология, которую можно подключить к любому проекту. Система контроля версий страхует от ошибок и возвращает код в то состояние, когда всё работало.&lt;/p&gt;
&lt;p&gt;Контрольные точки называются коммитами. Один коммит — это пакет изменений, хранящий информацию с добавленными, отредактированными или удалёнными файлами кода. В один коммит принято добавлять не более десяти изменений — так получается длинная история версий, которая позволяет в случае ошибки откатиться с минимальной потерей работоспособного кода.&lt;/p&gt;
&lt;h2 id=&#34;git--это-комплекс-связанных-веток&#34;&gt;Git — это комплекс связанных веток&lt;/h2&gt;
&lt;p&gt;Коммиты располагаются на master-ветке — основной версии проекта, которая после завершения работы превратится в продукт.&lt;/p&gt;
&lt;p&gt;Система контроля версий позволяет создавать ответвления от master-ветки и экспериментировать с проектом, не мешая другим участника команды.&lt;/p&gt;
&lt;p&gt;Возьмём предыдущую схему, где мы обнаружили ошибку и откатились на один коммит назад. Чтобы поправить код, создадим несколько дополнительных веток и в каждой протестируем разные варианты решения проблемы. Когда решение найдено, ветку с правильным кодом переносим в master-ветку и сохраняем коммит. Лишние ветки оставляем или удаляем, поскольку они не влияют на проект и скрыты от других разработчиков — это ваш личный черновик.&lt;/p&gt;
&lt;h2 id=&#34;git--это-инструмент-совместного-создания-кода&#34;&gt;Git — это инструмент совместного создания кода&lt;/h2&gt;
&lt;p&gt;Часто бывает так: разработчики отделяются от master-ветки и работают над частью проекта самостоятельно — например, чтобы протестировать дополнительные функции. Но не могут продолжить, пока кто-то из команды не допишет код.&lt;/p&gt;
&lt;p&gt;Система контроля версий позволяет не ждать обновления master-ветки и разрешает всем участникам команды свободно перемещаться между ветками других разработчиков для копирования нужных фрагментов кода.&lt;/p&gt;
&lt;p&gt;Бывают и обратные ситуации, когда несколько разработчиков одновременно дописывают код, заливают его в master-ветку и сталкиваются с конфликтом — один файл получает несколько несогласованных изменений. В этом случае Git попробует автоматически исправить ошибки. Если не получится, разработчики это увидят и смогут поправить код вручную.&lt;/p&gt;
&lt;h2 id=&#34;git--это-распределённая-система-версий&#34;&gt;Git — это распределённая система версий&lt;/h2&gt;
&lt;p&gt;Системы контроля версий бывают локальными, централизованными или распределёнными.&lt;/p&gt;
&lt;p&gt;Локальная система хранит файлы на одном устройстве, централизованная использует общий сервер, а распределённая — общее облачное хранилище и локальные устройства участников команды. В локальной системе удобно работать с большими проектами, но сложно взаимодействовать с удалённой командой.
В централизованной системе налажена удалённая работа, но всё привязано к одному серверу. Любой сбой или взлом может повредить файлы проекта.
В распределённой системе налажена удалённая работа. Если с файлами основного репозитория что-то случится — проект легко восстановить из копии любого участника команды.
Из-за удобства и гибкости распределённая система версий Git считается современным форматом. Это стандарт для большинства ИТ-команд.&lt;/p&gt;
&lt;h2 id=&#34;git--это-не-github&#34;&gt;Git — это не GitHub&lt;/h2&gt;
&lt;p&gt;Git — это программа, которую нужно установить и подключить к проекту для управления системой контроля версий. GitHub — это сайт-хранилище для историй версий проектов: вы подключаете Git, регистрируетесь на GitHub, создаёте онлайн-репозиторий и переносите файлы с Git на GitHub.&lt;/p&gt;
&lt;p&gt;Git — это самая популярная система контроля версий, а GitHub — онлайн-хранилище кода. Git и GitHub настроены на взаимодействие и поэтому часто используются как единый механизм работы с проектом.&lt;/p&gt;
&lt;p&gt;Если нужно, Git можно заменить альтернативной программой контроля версий, а GitHub — другим онлайн-хранилищем кода. Большинству работодателей это не нужно, поскольку знакомство с другими сервисами отнимает время и неудобно многим разработчикам.&lt;/p&gt;
&lt;h2 id=&#34;зачем-новичку-учить-git&#34;&gt;Зачем новичку учить Git&lt;/h2&gt;
&lt;p&gt;Git используется в большинстве компаний, где над проектом работает хотя бы два разработчика:&lt;/p&gt;
&lt;p&gt;Новый человек приходит в компанию и клонирует репозиторий проекта на ПК.
Получает задачу, создаёт новую ветку и пишет код.
Когда всё готово — отправляет запрос на добавление кода в master-ветку.
Другие разработчики смотрят код, оставляют комментарии и указывают на ошибки.
Новичок дорабатывает код, обновляет master-ветку и переходит к следующей задаче.
Это общая схема того, как проходит командная работа в проекте. В ней не учтены правила использования Git, которые каждая команда пишет под себя. Например, у каждой команды свой порядок проверки кода и свои критерии его готовности для добавления в master-ветку.&lt;/p&gt;
&lt;p&gt;Знание Git и знание правил использования Git в команде — это два разных навыка, которые можно сравнить с умением ездить на автомобиле и знанием правил дорожного движения. Если умеете управлять автомобилем — вам проще сконцентрироваться и быстро выучить правила. С Git аналогичная ситуация: если вы умеете управлять системой контроля версий, то можете сразу влиться в проект, не отвлекаться на второстепенные вещи и сосредоточиться на качестве кода.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Week from 04.03 to 10.03</title>
      <link>http://localhost:1313/post/week_summory/</link>
      <pubDate>Fri, 15 Mar 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/week_summory/</guid>
      <description>&lt;h2 id=&#34;архитектура-компьютеров&#34;&gt;Архитектура компьютеров&lt;/h2&gt;
&lt;p&gt;На прошлой неделе, я наконец-то смогла закончить выполнение всех лабораторных работ по Архитектуре компьютера.
Это было тяжело, много времени уходило на создание отчетов и презентаций. Иногда что-то не сохранялось и
было очень обидно все переписывать. Однако все задания сделаны и можно переходить к выполнению следующих работ.
Также, немаловажно, я сделала первую индивидуальную работу, в плане, часть 1 и начала выполнение курсов на Stepik&lt;/p&gt;
&lt;h2 id=&#34;технологии-программирования&#34;&gt;Технологии программирования&lt;/h2&gt;
&lt;p&gt;По данной дисциплине, я сделала лабораторную работу на языке С++ по теме Списки. Это был интересный и полезный опыт.&lt;/p&gt;
&lt;h2 id=&#34;компьюетрный-практикум&#34;&gt;Компьюетрный практикум&lt;/h2&gt;
&lt;p&gt;По данному предмету, я сделала 2 лабораторныe работы, первую - на языке программирования Кotin, а вторую на
языке прораммирования Java. На самом деле JAva - моя любовь уже очень давно и мне бы хотелось карьерно развиваться в
этом направлении.&lt;/p&gt;
&lt;h2 id=&#34;выводы--мысли&#34;&gt;Выводы / мысли&lt;/h2&gt;
&lt;p&gt;С нетерпением жду, когда закончу все задания по всем возможным предметам, чтобы наконец перейти к саморазвитию и
изучению интересного мне ЯП&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
